// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6658546bDecodeGithubComSoniricoGoHyperliquid(in *jlexer.Lexer, out *remoteTradesSubscriptionPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6658546bEncodeGithubComSoniricoGoHyperliquid(out *jwriter.Writer, in remoteTradesSubscriptionPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v remoteTradesSubscriptionPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v remoteTradesSubscriptionPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *remoteTradesSubscriptionPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *remoteTradesSubscriptionPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid(l, v)
}
func easyjson6658546bDecodeGithubComSoniricoGoHyperliquid1(in *jlexer.Lexer, out *remoteL2BookSubscriptionPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "nSigFigs":
			out.NSigFigs = int(in.Int())
		case "mantissa":
			out.Mantissa = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6658546bEncodeGithubComSoniricoGoHyperliquid1(out *jwriter.Writer, in remoteL2BookSubscriptionPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	if in.NSigFigs != 0 {
		const prefix string = ",\"nSigFigs\":"
		out.RawString(prefix)
		out.Int(int(in.NSigFigs))
	}
	if in.Mantissa != 0 {
		const prefix string = ",\"mantissa\":"
		out.RawString(prefix)
		out.Int(int(in.Mantissa))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v remoteL2BookSubscriptionPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v remoteL2BookSubscriptionPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *remoteL2BookSubscriptionPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *remoteL2BookSubscriptionPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid1(l, v)
}
func easyjson6658546bDecodeGithubComSoniricoGoHyperliquid2(in *jlexer.Lexer, out *remoteCandlesSubscriptionPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6658546bEncodeGithubComSoniricoGoHyperliquid2(out *jwriter.Writer, in remoteCandlesSubscriptionPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v remoteCandlesSubscriptionPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v remoteCandlesSubscriptionPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *remoteCandlesSubscriptionPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *remoteCandlesSubscriptionPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid2(l, v)
}
func easyjson6658546bDecodeGithubComSoniricoGoHyperliquid3(in *jlexer.Lexer, out *remoteAllMidsSubscriptionPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "dex":
			if in.IsNull() {
				in.Skip()
				out.Dex = nil
			} else {
				if out.Dex == nil {
					out.Dex = new(string)
				}
				*out.Dex = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6658546bEncodeGithubComSoniricoGoHyperliquid3(out *jwriter.Writer, in remoteAllMidsSubscriptionPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Dex != nil {
		const prefix string = ",\"dex\":"
		out.RawString(prefix)
		out.String(string(*in.Dex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v remoteAllMidsSubscriptionPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v remoteAllMidsSubscriptionPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6658546bEncodeGithubComSoniricoGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *remoteAllMidsSubscriptionPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *remoteAllMidsSubscriptionPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6658546bDecodeGithubComSoniricoGoHyperliquid3(l, v)
}
