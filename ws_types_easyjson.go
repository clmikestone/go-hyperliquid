// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid(in *jlexer.Lexer, out *subscriptionCallback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid(out *jwriter.Writer, in subscriptionCallback) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v subscriptionCallback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v subscriptionCallback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *subscriptionCallback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *subscriptionCallback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid1(in *jlexer.Lexer, out *subKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid1(out *jwriter.Writer, in subKey) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v subKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v subKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *subKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *subKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid1(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid2(in *jlexer.Lexer, out *WsCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "subscription":
			if in.IsNull() {
				in.Skip()
				out.Subscription = nil
			} else {
				if out.Subscription == nil {
					out.Subscription = new(Subscription)
				}
				(*out.Subscription).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid2(out *jwriter.Writer, in WsCommand) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	if in.Subscription != nil {
		const prefix string = ",\"subscription\":"
		out.RawString(prefix)
		(*in.Subscription).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid2(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid3(in *jlexer.Lexer, out *WSMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid3(out *jwriter.Writer, in WSMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid3(l, v)
}
func easyjson8df87204DecodeGithubComSoniricoGoHyperliquid4(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "user":
			out.User = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8df87204EncodeGithubComSoniricoGoHyperliquid4(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Coin != "" {
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Interval != "" {
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8df87204EncodeGithubComSoniricoGoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8df87204DecodeGithubComSoniricoGoHyperliquid4(l, v)
}
