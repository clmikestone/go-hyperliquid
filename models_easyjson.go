// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hyperliquid

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid(in *jlexer.Lexer, out *VIPTier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			out.Add = string(in.String())
		case "cross":
			out.Cross = string(in.String())
		case "ntlCutoff":
			out.NtlCutoff = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid(out *jwriter.Writer, in VIPTier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix[1:])
		out.String(string(in.Add))
	}
	{
		const prefix string = ",\"cross\":"
		out.RawString(prefix)
		out.String(string(in.Cross))
	}
	{
		const prefix string = ",\"ntlCutoff\":"
		out.RawString(prefix)
		out.String(string(in.NtlCutoff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VIPTier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VIPTier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VIPTier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VIPTier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid1(in *jlexer.Lexer, out *UserVolume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "exchange":
			out.Exchange = string(in.String())
		case "userAdd":
			out.UserAdd = string(in.String())
		case "userCross":
			out.UserCross = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid1(out *jwriter.Writer, in UserVolume) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"userAdd\":"
		out.RawString(prefix)
		out.String(string(in.UserAdd))
	}
	{
		const prefix string = ",\"userCross\":"
		out.RawString(prefix)
		out.String(string(in.UserCross))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserVolume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserVolume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserVolume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserVolume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid1(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid2(in *jlexer.Lexer, out *UserState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assetPositions":
			if in.IsNull() {
				in.Skip()
				out.AssetPositions = nil
			} else {
				in.Delim('[')
				if out.AssetPositions == nil {
					if !in.IsDelim(']') {
						out.AssetPositions = make([]AssetPosition, 0, 0)
					} else {
						out.AssetPositions = []AssetPosition{}
					}
				} else {
					out.AssetPositions = (out.AssetPositions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AssetPosition
					(v1).UnmarshalEasyJSON(in)
					out.AssetPositions = append(out.AssetPositions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "crossMarginSummary":
			(out.CrossMarginSummary).UnmarshalEasyJSON(in)
		case "marginSummary":
			(out.MarginSummary).UnmarshalEasyJSON(in)
		case "withdrawable":
			out.Withdrawable = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid2(out *jwriter.Writer, in UserState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assetPositions\":"
		out.RawString(prefix[1:])
		if in.AssetPositions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AssetPositions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"crossMarginSummary\":"
		out.RawString(prefix)
		(in.CrossMarginSummary).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"marginSummary\":"
		out.RawString(prefix)
		(in.MarginSummary).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"withdrawable\":"
		out.RawString(prefix)
		out.String(string(in.Withdrawable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid2(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid3(in *jlexer.Lexer, out *UserFundingHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "startTime":
			out.StartTime = int64(in.Int64())
		case "endTime":
			out.EndTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid3(out *jwriter.Writer, in UserFundingHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"endTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFundingHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFundingHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFundingHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFundingHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid3(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid4(in *jlexer.Lexer, out *UserFees) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "activeReferralDiscount":
			out.ActiveReferralDiscount = string(in.String())
		case "dailyUserVlm":
			if in.IsNull() {
				in.Skip()
				out.DailyUserVolume = nil
			} else {
				in.Delim('[')
				if out.DailyUserVolume == nil {
					if !in.IsDelim(']') {
						out.DailyUserVolume = make([]UserVolume, 0, 1)
					} else {
						out.DailyUserVolume = []UserVolume{}
					}
				} else {
					out.DailyUserVolume = (out.DailyUserVolume)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UserVolume
					(v4).UnmarshalEasyJSON(in)
					out.DailyUserVolume = append(out.DailyUserVolume, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "feeSchedule":
			(out.FeeSchedule).UnmarshalEasyJSON(in)
		case "userAddRate":
			out.UserAddRate = string(in.String())
		case "userCrossRate":
			out.UserCrossRate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid4(out *jwriter.Writer, in UserFees) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"activeReferralDiscount\":"
		out.RawString(prefix[1:])
		out.String(string(in.ActiveReferralDiscount))
	}
	{
		const prefix string = ",\"dailyUserVlm\":"
		out.RawString(prefix)
		if in.DailyUserVolume == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.DailyUserVolume {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"feeSchedule\":"
		out.RawString(prefix)
		(in.FeeSchedule).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"userAddRate\":"
		out.RawString(prefix)
		out.String(string(in.UserAddRate))
	}
	{
		const prefix string = ",\"userCrossRate\":"
		out.RawString(prefix)
		out.String(string(in.UserCrossRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFees) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFees) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFees) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFees) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid4(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid5(in *jlexer.Lexer, out *Trade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "px":
			out.Px = string(in.String())
		case "sz":
			out.Sz = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "hash":
			out.Hash = string(in.String())
		case "tid":
			out.Tid = int64(in.Int64())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]string, 0, 4)
					} else {
						out.Users = []string{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Users = append(out.Users, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid5(out *jwriter.Writer, in Trade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"tid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Tid))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Users {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid5(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid6(in *jlexer.Lexer, out *Tiers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mm":
			if in.IsNull() {
				in.Skip()
				out.MM = nil
			} else {
				in.Delim('[')
				if out.MM == nil {
					if !in.IsDelim(']') {
						out.MM = make([]MMTier, 0, 2)
					} else {
						out.MM = []MMTier{}
					}
				} else {
					out.MM = (out.MM)[:0]
				}
				for !in.IsDelim(']') {
					var v10 MMTier
					(v10).UnmarshalEasyJSON(in)
					out.MM = append(out.MM, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vip":
			if in.IsNull() {
				in.Skip()
				out.VIP = nil
			} else {
				in.Delim('[')
				if out.VIP == nil {
					if !in.IsDelim(']') {
						out.VIP = make([]VIPTier, 0, 1)
					} else {
						out.VIP = []VIPTier{}
					}
				} else {
					out.VIP = (out.VIP)[:0]
				}
				for !in.IsDelim(']') {
					var v11 VIPTier
					(v11).UnmarshalEasyJSON(in)
					out.VIP = append(out.VIP, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid6(out *jwriter.Writer, in Tiers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mm\":"
		out.RawString(prefix[1:])
		if in.MM == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.MM {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vip\":"
		out.RawString(prefix)
		if in.VIP == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.VIP {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tiers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tiers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tiers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tiers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid6(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid7(in *jlexer.Lexer, out *SubAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "user":
			out.User = string(in.String())
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]string, 0, 4)
					} else {
						out.Permissions = []string{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Permissions = append(out.Permissions, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid7(out *jwriter.Writer, in SubAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Permissions {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid7(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid8(in *jlexer.Lexer, out *StakingSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegated":
			out.Delegated = string(in.String())
		case "undelegated":
			out.Undelegated = string(in.String())
		case "totalPendingWithdrawal":
			out.TotalPendingWithdrawal = string(in.String())
		case "nPendingWithdrawals":
			out.NPendingWithdrawals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid8(out *jwriter.Writer, in StakingSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegated\":"
		out.RawString(prefix[1:])
		out.String(string(in.Delegated))
	}
	{
		const prefix string = ",\"undelegated\":"
		out.RawString(prefix)
		out.String(string(in.Undelegated))
	}
	{
		const prefix string = ",\"totalPendingWithdrawal\":"
		out.RawString(prefix)
		out.String(string(in.TotalPendingWithdrawal))
	}
	{
		const prefix string = ",\"nPendingWithdrawals\":"
		out.RawString(prefix)
		out.Int(int(in.NPendingWithdrawals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid8(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid9(in *jlexer.Lexer, out *StakingReward) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "source":
			out.Source = string(in.String())
		case "totalAmount":
			out.TotalAmount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid9(out *jwriter.Writer, in StakingReward) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"totalAmount\":"
		out.RawString(prefix)
		out.String(string(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingReward) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingReward) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingReward) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingReward) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid9(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid10(in *jlexer.Lexer, out *StakingDelegation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "validator":
			out.Validator = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "lockedUntilTimestamp":
			out.LockedUntilTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid10(out *jwriter.Writer, in StakingDelegation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"validator\":"
		out.RawString(prefix[1:])
		out.String(string(in.Validator))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"lockedUntilTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.LockedUntilTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StakingDelegation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StakingDelegation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StakingDelegation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StakingDelegation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid10(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid11(in *jlexer.Lexer, out *ReferralState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "referralCode":
			out.ReferralCode = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "referred":
			if in.IsNull() {
				in.Skip()
				out.Referred = nil
			} else {
				in.Delim('[')
				if out.Referred == nil {
					if !in.IsDelim(']') {
						out.Referred = make([]string, 0, 4)
					} else {
						out.Referred = []string{}
					}
				} else {
					out.Referred = (out.Referred)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Referred = append(out.Referred, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid11(out *jwriter.Writer, in ReferralState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"referralCode\":"
		out.RawString(prefix[1:])
		out.String(string(in.ReferralCode))
	}
	{
		const prefix string = ",\"referrer\":"
		out.RawString(prefix)
		out.String(string(in.Referrer))
	}
	{
		const prefix string = ",\"referred\":"
		out.RawString(prefix)
		if in.Referred == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Referred {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReferralState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReferralState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReferralState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReferralState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid11(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid12(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "entryPx":
			if in.IsNull() {
				in.Skip()
				out.EntryPx = nil
			} else {
				if out.EntryPx == nil {
					out.EntryPx = new(string)
				}
				*out.EntryPx = string(in.String())
			}
		case "leverage":
			(out.Leverage).UnmarshalEasyJSON(in)
		case "liquidationPx":
			if in.IsNull() {
				in.Skip()
				out.LiquidationPx = nil
			} else {
				if out.LiquidationPx == nil {
					out.LiquidationPx = new(string)
				}
				*out.LiquidationPx = string(in.String())
			}
		case "marginUsed":
			out.MarginUsed = string(in.String())
		case "positionValue":
			out.PositionValue = string(in.String())
		case "returnOnEquity":
			out.ReturnOnEquity = string(in.String())
		case "szi":
			out.Szi = string(in.String())
		case "unrealizedPnl":
			out.UnrealizedPnl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid12(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"entryPx\":"
		out.RawString(prefix)
		if in.EntryPx == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.EntryPx))
		}
	}
	{
		const prefix string = ",\"leverage\":"
		out.RawString(prefix)
		(in.Leverage).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"liquidationPx\":"
		out.RawString(prefix)
		if in.LiquidationPx == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LiquidationPx))
		}
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	{
		const prefix string = ",\"returnOnEquity\":"
		out.RawString(prefix)
		out.String(string(in.ReturnOnEquity))
	}
	{
		const prefix string = ",\"szi\":"
		out.RawString(prefix)
		out.String(string(in.Szi))
	}
	{
		const prefix string = ",\"unrealizedPnl\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPnl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid12(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid13(in *jlexer.Lexer, out *OpenOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "limitPx":
			out.LimitPx = float64(in.Float64Str())
		case "oid":
			out.Oid = int64(in.Int64())
		case "side":
			out.Side = string(in.String())
		case "sz":
			out.Size = float64(in.Float64Str())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid13(out *jwriter.Writer, in OpenOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"limitPx\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.LimitPx))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Size))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid13(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid14(in *jlexer.Lexer, out *MultiSigSigner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "threshold":
			out.Threshold = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid14(out *jwriter.Writer, in MultiSigSigner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"threshold\":"
		out.RawString(prefix)
		out.Int(int(in.Threshold))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiSigSigner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiSigSigner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiSigSigner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiSigSigner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid14(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid15(in *jlexer.Lexer, out *MarginSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountValue":
			out.AccountValue = string(in.String())
		case "totalMarginUsed":
			out.TotalMarginUsed = string(in.String())
		case "totalNtlPos":
			out.TotalNtlPos = string(in.String())
		case "totalRawUsd":
			out.TotalRawUsd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid15(out *jwriter.Writer, in MarginSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountValue\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountValue))
	}
	{
		const prefix string = ",\"totalMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.TotalMarginUsed))
	}
	{
		const prefix string = ",\"totalNtlPos\":"
		out.RawString(prefix)
		out.String(string(in.TotalNtlPos))
	}
	{
		const prefix string = ",\"totalRawUsd\":"
		out.RawString(prefix)
		out.String(string(in.TotalRawUsd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid15(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid16(in *jlexer.Lexer, out *MMTier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			out.Add = string(in.String())
		case "makerFractionCutoff":
			out.MakerFractionCutoff = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid16(out *jwriter.Writer, in MMTier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix[1:])
		out.String(string(in.Add))
	}
	{
		const prefix string = ",\"makerFractionCutoff\":"
		out.RawString(prefix)
		out.String(string(in.MakerFractionCutoff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MMTier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MMTier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MMTier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MMTier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid16(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid17(in *jlexer.Lexer, out *Leverage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = int(in.Int())
		case "rawUsd":
			if in.IsNull() {
				in.Skip()
				out.RawUsd = nil
			} else {
				if out.RawUsd == nil {
					out.RawUsd = new(string)
				}
				*out.RawUsd = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid17(out *jwriter.Writer, in Leverage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	if in.RawUsd != nil {
		const prefix string = ",\"rawUsd\":"
		out.RawString(prefix)
		out.String(string(*in.RawUsd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Leverage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Leverage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Leverage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Leverage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid17(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid18(in *jlexer.Lexer, out *Level) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "n":
			out.N = int(in.Int())
		case "px":
			out.Px = float64(in.Float64Str())
		case "sz":
			out.Sz = float64(in.Float64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid18(out *jwriter.Writer, in Level) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix[1:])
		out.Int(int(in.N))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Px))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Sz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Level) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Level) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Level) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Level) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid18(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid19(in *jlexer.Lexer, out *L2Book) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "levels":
			if in.IsNull() {
				in.Skip()
				out.Levels = nil
			} else {
				in.Delim('[')
				if out.Levels == nil {
					if !in.IsDelim(']') {
						out.Levels = make([][]Level, 0, 2)
					} else {
						out.Levels = [][]Level{}
					}
				} else {
					out.Levels = (out.Levels)[:0]
				}
				for !in.IsDelim(']') {
					var v22 []Level
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						in.Delim('[')
						if v22 == nil {
							if !in.IsDelim(']') {
								v22 = make([]Level, 0, 2)
							} else {
								v22 = []Level{}
							}
						} else {
							v22 = (v22)[:0]
						}
						for !in.IsDelim(']') {
							var v23 Level
							(v23).UnmarshalEasyJSON(in)
							v22 = append(v22, v23)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Levels = append(out.Levels, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid19(out *jwriter.Writer, in L2Book) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"levels\":"
		out.RawString(prefix)
		if in.Levels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Levels {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v26, v27 := range v25 {
						if v26 > 0 {
							out.RawByte(',')
						}
						(v27).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v L2Book) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v L2Book) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *L2Book) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *L2Book) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid19(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid20(in *jlexer.Lexer, out *FundingHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			out.Coin = string(in.String())
		case "fundingRate":
			out.FundingRate = string(in.String())
		case "premium":
			out.Premium = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid20(out *jwriter.Writer, in FundingHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"fundingRate\":"
		out.RawString(prefix)
		out.String(string(in.FundingRate))
	}
	{
		const prefix string = ",\"premium\":"
		out.RawString(prefix)
		out.String(string(in.Premium))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FundingHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FundingHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FundingHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FundingHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid20(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid21(in *jlexer.Lexer, out *Fill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "closedPnl":
			out.ClosedPnl = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		case "crossed":
			out.Crossed = bool(in.Bool())
		case "dir":
			out.Dir = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "oid":
			out.Oid = int64(in.Int64())
		case "px":
			out.Price = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "startPosition":
			out.StartPosition = string(in.String())
		case "sz":
			out.Size = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid21(out *jwriter.Writer, in Fill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"closedPnl\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClosedPnl))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	{
		const prefix string = ",\"crossed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Crossed))
	}
	{
		const prefix string = ",\"dir\":"
		out.RawString(prefix)
		out.String(string(in.Dir))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"oid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Oid))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"startPosition\":"
		out.RawString(prefix)
		out.String(string(in.StartPosition))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid21(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid22(in *jlexer.Lexer, out *FeeSchedule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			out.Add = string(in.String())
		case "cross":
			out.Cross = string(in.String())
		case "referralDiscount":
			out.ReferralDiscount = string(in.String())
		case "tiers":
			(out.Tiers).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid22(out *jwriter.Writer, in FeeSchedule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"add\":"
		out.RawString(prefix[1:])
		out.String(string(in.Add))
	}
	{
		const prefix string = ",\"cross\":"
		out.RawString(prefix)
		out.String(string(in.Cross))
	}
	{
		const prefix string = ",\"referralDiscount\":"
		out.RawString(prefix)
		out.String(string(in.ReferralDiscount))
	}
	{
		const prefix string = ",\"tiers\":"
		out.RawString(prefix)
		(in.Tiers).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeeSchedule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeeSchedule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeeSchedule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeeSchedule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid22(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid23(in *jlexer.Lexer, out *Candle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T":
			out.Timestamp = int64(in.Int64())
		case "c":
			out.Close = string(in.String())
		case "h":
			out.High = string(in.String())
		case "i":
			out.Interval = string(in.String())
		case "l":
			out.Low = string(in.String())
		case "n":
			out.Number = int(in.Int())
		case "o":
			out.Open = string(in.String())
		case "s":
			out.Symbol = string(in.String())
		case "t":
			out.Time = int64(in.Int64())
		case "v":
			out.Volume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid23(out *jwriter.Writer, in Candle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Candle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Candle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Candle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Candle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid23(l, v)
}
func easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid24(in *jlexer.Lexer, out *AssetPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "position":
			(out.Position).UnmarshalEasyJSON(in)
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid24(out *jwriter.Writer, in AssetPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix[1:])
		(in.Position).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssetPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssetPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSoniricoGoHyperliquid24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssetPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssetPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSoniricoGoHyperliquid24(l, v)
}
